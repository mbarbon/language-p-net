using System.IO;

namespace org.mbarbon.p.runtime
{
    public class Serializer
    {
        public static CompilationUnit ReadCompilationUnit(BinaryReader reader)
        {
            int count = reader.ReadInt32();
            var cu = new CompilationUnit(count);

            for (int i = 0; i < count; ++i)
            {
                cu.Subroutines[i] = ReadSubroutine(reader);
            }

            return cu;
        }

        public static Subroutine ReadSubroutine(BinaryReader reader)
        {
            var name = ReadString(reader);
            int count = reader.ReadInt32();
            var sub = new Subroutine(count);

            sub.Name = name;
            for (int i = 0; i < count; ++i)
            {
                sub.BasicBlocks[i] = ReadBasicBlock(reader);
            }

            return sub;
        }

        public static BasicBlock ReadBasicBlock(BinaryReader reader)
        {
            int count = reader.ReadInt32();
            var bb = new BasicBlock(count);

            for (int i = 0; i < count; ++i)
            {
                bb.Opcodes[i] = ReadOpcode(reader);
            }

            return bb;
        }

        // FIXME needs to be autogenerated
        public static Opcode ReadOpcode(BinaryReader reader)
        {
            var num = (Opcode.OpNumber)reader.ReadInt16();
            Opcode op;

            switch (num)
            {
            case Opcode.OpNumber.OP_CONSTANT_STRING:
                ConstantString cs = new ConstantString();
                op = cs;
                cs.Value = ReadString(reader);
                break;
            case Opcode.OpNumber.OP_GLOBAL:
                Global gl = new Global();
                op = gl;
                gl.Name = ReadString(reader);
                gl.Slot = reader.ReadByte();
                break;
            default:
                op = new Opcode();
                break;
            }

            op.Number = num;
            int count = reader.ReadInt32();
            op.Childs = new Opcode[count];
            
            for (int i = 0; i < count; ++i)
            {
                op.Childs[i] = ReadOpcode(reader);
            }

            return op;
        }

        public static string ReadString(BinaryReader reader)
        {
            int size = reader.ReadInt32();
            if (size == 0)
                return "";
            
            byte[] bytes = reader.ReadBytes(size);

            return System.Text.Encoding.UTF8.GetString(bytes);
        }
    }
    
    public class Opcode
    {
        public enum OpNumber : short
        {
            OP_CONSTANT_STRING = 22,
            OP_GLOBAL         = 70,
            OP_MAKE_LIST      = 103,
            OP_PRINT          = 131,
            OP_POP            = 125,
            OP_END            = 38,
        }
        
        public OpNumber Number;
        public Opcode[] Childs;
    }

    public class Global : Opcode
    {
        public string Name;
        public int Slot;
    }

    public class ConstantInt : Opcode
    {
        public int Value;
    }

    public class ConstantString : Opcode
    {
        public string Value;
    }

    public class BasicBlock
    {
        public BasicBlock(int opCount)
        {
            Opcodes = new Opcode[opCount];
        }
        
        public int Index;
        public Opcode[] Opcodes;
    }

    public class Subroutine
    {
        public Subroutine(int blockCount)
        {
            BasicBlocks = new BasicBlock[blockCount];
        }
        
        public string Name;
        public BasicBlock[] BasicBlocks;
    }
    
    public class CompilationUnit
    {
        public CompilationUnit(int subCount)
        {
            Subroutines = new Subroutine[subCount];
        }
        
        public Subroutine[] Subroutines;
    }
}
